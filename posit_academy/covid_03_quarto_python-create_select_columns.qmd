---
title: "Create and select columns"
format: html
---

# Instructions

This week, you learned about several more pandas methods and attributes. These functions help you work with the columns in your data set.

You'll use these skills to add new columns that calculate the cumulative number of cases and deaths across states.

To learn more about the variables contained in the data set, refer to the data dictionary: https://rsacdn.link/milestones/internal/python/covid/assets/covid_dictionary.html

# Milestone

```{python}
#| label: 'setup'
#| include: false

# Import your packages here
import pandas as pd
from matplotlib import rcParams

# Set some options
pd.set_option('mode.copy_on_write', True)
pd.set_option('display.max_columns', None)
rcParams.update({'savefig.bbox': 'tight'}) # Keeps plotnine legend from being cut off
```

## Create and select columns

In this milestone, you'll create a new variable that calculates the cumulative values of `cases` and `deaths` across states.

## Recreation

### Part 1 - Import

First, import your data set:

1.  Use the code chunk below to read the data from the data file `covid.csv`, which is stored in the `data/` folder in your working directory
2.  Save the data set to a variable named `covid`

```{python}
#| label: 'recreation-import'

covid = pd.read_csv('data/covid.csv')
```

### Part 2a - Create Columns

Run the code below to see a table.

```{python}
#| label: 'recreate-this'
#| message: false

solution = pd.read_csv('data/milestone03.csv')
solution
```

Your task is to use what you've learned to transform `covid` into this table.

You will need to:

1.  Subset `covid` for records where the state is `NY` and save the result as a new data set named `subset`.
2.  Continuing to work with `subset`, create a new column named `cumul_cases`, which contains the result of `.cumsum()`.
3.  Still within `subset`, create a new column named `cumul_deaths`, which contains the result of `.cumsum()`.

Work in the code chunk below for your table transformation:

```{python}
#| label: 'recreation-create'

subset = covid.loc[covid['state'] == 'NY']
subset['cumul_cases'] = subset['cases'].cumsum()
subset['cumul_deaths'] = subset['deaths'].cumsum()
```

Run the following code chunk to test whether your table matches the solution:

```{python}
#| label: 'compare'

# If your answer is correct, the comparison should return an empty DataFrame.
subset.reset_index(drop=True).compare(solution)
```

### Part 2b - Manipulate columns

Your next task is to create two new columns, `cumul_cases_millions` and `cumul_deaths_millions` that contain the values from `cumul_cases` and `cumul_deaths` divided by 1000000. This will make the values easier to interpret when we plot them later.

```{python}
#| label: 'millions'

subset['cumul_cases_millions'] = subset['cumul_cases'] / 1000000
subset['cumul_deaths_millions'] = subset['cumul_deaths'] / 1000000
```

### Part 3 - Visualize

Using the File Explorer on the left, navigate to the `images/` directory, then click on `milestone03.png` to open an image in the Editor pane.

You should see a line plot that displays millions of cumulative cases over time for the state of New York.

Your task is to recreate this plot using your updated version of `subset`. Use the chunk below.

```{python}
#| label: 'recreation-visualize'

from plotnine import ggplot, aes, geom_line, theme, element_blank, element_rect, labs, geom_col, coord_flip, theme_minimal, scale_fill_manual

ggplot.show(
  ggplot(
    data = subset,
    mapping = aes(
      x = 'date', 
      y = 'cumul_cases_millions'
      )
    ) +
    geom_line(
      mapping = aes(
        group = 1
      )
    ) +
    labs(
      title = "Cumulative covid cases",
      x = "Date",
      y = "Millions of Cases"
    ) +
    theme(
      panel_grid = element_blank(),
      plot_background = element_rect(color="#ffffff"),
      panel_background = element_rect(fill="#ffffff")
    ) 
  )
```

## Extension

Using the code chunk below, investigate a research question about this data, using the additional data wrangling skills you learned this week. Some ideas:

1.  Milestone 2 focused on patterns in `cases` and `deaths` over time, just within New York. What patterns do you see in the *ratio* of `deaths` to `cases`, over time, within New York and elsewhere? (Compare states of your choosing.)

2.  Based on *either* `cases` or `deaths`, divide this data into groups of your choosing (e.g. low/medium/high, above/below a national average, etc.) and explore patterns based on these groups.

3.  \[any other research question of interest\]

Alternately, working with a data set of your own, complete the following:

1.  Read in your data
2.  Create at least one new variable in your data set using mathematical operations
3.  Use your updated data set to create at least one graph and/or table

### Ratio of Deaths to Cases: New York State

-   New York was devastated by a high ratio of deaths early in the pandemic.
-   Beyond ⍺, this could reflect the low rate of/efficacy of/access to detection early in the pandemic before normalizing with broader access to testing, thus reflecting uncertainty of the actual COVID-19 prevalence.

```{python}
#| label: 'extension'

subset['deaths_to_cases'] = subset['deaths'] / subset['cases']

ggplot.show(
  ggplot(
    data = subset, 
    mapping = aes(
      x = 'date', 
      y = 'deaths_to_cases'
      )
    ) +
    geom_line(
      aes(
        group = 1
      )
    ) +
    labs(
      title = "Ratio of Deaths Due to COVID-19 vs. Cases: NY",
      x = "Date",
      y = ""
    ) +
    theme(
      panel_grid = element_blank(),
      plot_background = element_rect(color="#ffffff"),
      panel_background = element_rect(fill="#ffffff")
    ) 
)
```

### Ratio of Deaths to Cases: Virginia

-   Like New York, Virginia saw a strong spike in deaths during the early stages of the SARS-CoV-2 pandemic.
-   Unlike, New York, Virginia was greatly affected by 𝚫, with the ratio of deaths to cases climbing to 0.25 on March 3, 2021.

```{python}

va_subset = covid.loc[covid['state'] == 'VA', ['date', 'state', 'deaths', 'cases']]
va_subset['deaths_to_cases'] = va_subset['deaths'] / va_subset['cases']


ggplot.show(
  ggplot(
    data = va_subset, 
    mapping = aes(
      x = 'date', 
      y = 'deaths_to_cases'
      )
    ) +
    geom_line(
      aes(
        group = 1
      )
    ) +
    labs(
      title = "Ratio of Deaths Due to COVID-19 vs. Cases: VA",
      x = "Date",
      y = ""
    ) +
    theme(
      panel_grid = element_blank(),
      plot_background = element_rect(color="#ffffff"),
      panel_background = element_rect(fill="#ffffff")
    ) 
)

```

Based on *either* `cases` or `deaths`, divide this data into groups of your choosing (e.g. low/medium/high, above/below a national average, etc.) and explore patterns based on these groups.

```{python}
mean_national_cases = covid['cases'].mean()
```



```{python}

covid_state_cases = (
  covid
  .groupby('state')
  .agg({
    'cases': 'mean'
    })
  .rename(
    columns = {'cases': 'Mean_Cases'}
  )
)

covid_state_cases['above_national_avg'] = covid_state_cases['Mean_Cases'] > mean_national_cases
covid_state_cases = covid_state_cases.reset_index()

covid_state_cases['centered_cases'] = covid_state_cases['Mean_Cases'] - mean_national_cases

```


```{python}
#| fig-height: 7
ggplot.show(
  ggplot(
    # data = covid_state_cases.iloc[0:10], 
    data = covid_state_cases, 
    mapping = aes(
      y = 'centered_cases',
      x = 'reorder(state, centered_cases)',
      fill = 'above_national_avg'
    )
  ) +
  geom_col() +
  scale_fill_manual(
    values = ['#ff8200', 'blue']
  ) +
  labs(
    x = "",
    y = "",
    title = "Cases Above/Below National Average COVID-19 Cases",
    subtitle = "January 2020 through March 2021"
  ) +
  coord_flip() +
  theme_minimal(
    # base_family = "Arial",
    base_size = 14
  ) +
  theme(
    panel_grid_major_y = element_blank(),
    legend_position = "none"
  )
)
```